========================================================================
Tracking evolution of C/C++ source code by comparing object file changes
========================================================================

:Home URL: https://github.com/pierre-rouleau/usrhome
:Project:
:Created:  Friday, June 14 2024.
:Author:  Pierre Rouleau <prouleau001@gmail.com>
:Modified: 2024-06-14 12:08:41, by Pierre Rouleau.
:Copyright: © 2024, Pierre Rouleau


.. contents::  **Table of Contents**
.. sectnum::

.. ---------------------------------------------------------------------------

Introduction
============

**The Problem**

You are working on a C or C++ based program and would like to know the impact
on some of the changes you are making or want to make to the source code.

In some cases, you may simply want to change the *style* of the source code to
comply with some source code guideline. Or refactor code that uses dangerous
constructs.

In that situation you often stumble on opposition, your own or other's.
Objection like "*if it ain't broken don't fix it*".  But you know that the code
you're looking at is dangerous, it "*works by chance™".  And if more people
use that style or construct in other places they may run in trouble or cause
major issues in the system; increase entropy and the technical debt.

After all this is C or C++ code we're talking about here.  And there some
projects that do not have a good unit or system test coverage and/or may not
even be statically analyzed with good static analysis tools.


For instance you may want to change code from:

.. code:: c

          if (value == TRUE)

to:

.. code:: c

          if (value)

You know the second *style* is better, it does not depend on a ``#define`` of
``TRUE`` which could be wrong, and if this is C++ you also know that ``TRUE``
might not be defined.

You may also want to use tools that can perform file-wide replacement of that
type of source code and want to ensure no harm is done.


**A Tool - Tracking Evolution of generated assembler code**

There are several solutions to the described problem. One of them is to check
the impact of your code changes.  And in some cases the modification of the
source code may not have *any* impact to the generated assembler.

USRHOME provides a set of tools to check the differences in generated
assembler  from compiled source code file and keep a track of the source code
and the generated assembler.  With that available it become easy to see if
your source code changes have an impact and if they improve your software or
degrade it.

These tools are:

==================== =========================================================
Command              Purpose
==================== =========================================================
`use-mk-diffo`_      Setup a shell to use `mk-diffo`_: identify the root
                     db directory of the set of stored files, the name of the
                     project, the path of the source code file monitored and,
                     optionally, the object file extension.

`mk-diffo`_          Store the current version of the monitored source code
                     and its object file in the db directory associated with a
                     version number starting at 0, inside the currently
                     specified project name and compute the diff between the
                     objdump of the specified version of the file and the
                     current one.  The diff is computed by `diffo`_.

diffo_               Perform the object file difference between two object
                     files by comparing the assembly output generated by
                     objdump of each file and optionally by the strings output
                     of these files.

`use-cc-options`_    *Augment* the way C/C++ files are compiled with the cc_
                     command line.  See `USRHOME augmented commands`_.  Use
                     this to impose a set of extra command line options for
                     the cc_ compiler, such as the ``-g`` option to force
                     compilation in debug mode.
==================== =========================================================

.. ---------------------------------------------------------------------------
.. links


.. _use-cc-options:            https://github.com/pierre-rouleau/usrhome/tree/main/ibin/envfor-cc-options
.. _use-mk-diffo:              https://github.com/pierre-rouleau/usrhome/tree/main/ibin/envfor-mk-diffo
.. _cc:                        https://github.com/pierre-rouleau/usrhome/tree/main/bin/augmented/cc
.. _mk-diffo:                  https://github.com/pierre-rouleau/usrhome/tree/main/bin/mk-diffo
.. _diffo:                     https://github.com/pierre-rouleau/usrhome/tree/main/bin/diffo
.. _USRHOME augmented commands: https://github.com/pierre-rouleau/usrhome/blob/main/bin/augmented/readme.rst.txt

.. ---------------------------------------------------------------------------

..
       Local Variables:
       time-stamp-line-limit: 10
       time-stamp-start: "^:Modified:[ \t]+\\\\?"
       time-stamp-end:   "\\.$"
       End:
