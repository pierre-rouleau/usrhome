#!/bin/sh
# SH FILE: find-perl
#
# Purpose   : Find all Perl files in specified directory tree.
# Created   : Tuesday, October  8 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2025-01-16 23:46:52 EST, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
#


# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
#


# ----------------------------------------------------------------------------
# Code
# ----
#
#

print_usage()
{
    printf -- "
find-perl: Find and print the name of every Perl file found in directory tree.
           Search for files with  the following extensions:
          - .pl, .pm, .plx, .pls, .xs, .t, .pod, .cgi, .psg, .psgi

 Usage: find-perl -h|--help

  • Print this help information.

 Usage: find-perl [DIR, ...]

  • Search and print name of Perl files found in specified directories.
    - If DIR is not specified, search in the current working directory.
  • This also finds script files that uses the /usr/bin/perl shebang line.
  • The first list is for scripts, then the pure Perl files.

"
}

# [:todo 2024-10-08, by Pierre Rouleau: Add ability to pass find options such as -x]

# --
# Check validity of arguments

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    exit 0
fi



if [ -x "$(command -v fdfind)" ]; then
    search_with='fd'
    fd_pgm=fdfind
elif [ -x "$(command -v fd)" ]; then
    search_with='fd'
    fd_pgm=fd
else
    search_with='find'
    case $(uname) in
        Darwin)
            find_path_option='-f'
            ;;
        Linux)
            find_path_option=
            ;;
        *)
            printf -- "find-perl ** Error Operating System, %s, is not supported!\n" "$(uname)"
            exit 1
            ;;
    esac
fi

# -----------------------------------------------------------------------------
# Proceed:
#
# -x : do not search into other disks
# stderr redirected to /dev/null to hide warnings trying to access
# non-accessible directories.

# First search for shell scripts that use Perl.
# - Exclude perltidy files, Emacs backup and buffers files.
if [ -x "$(command -v rg)" ]; then
    if [ -z "$1" ]; then
        rg -g !'*.tdy' -g !'*~' -g !'*#' -Nl "^#! .+/perl" "$(realpath .)" 2> /dev/null
    else
        for dname in "$@"; do
            rg -g !'*.tdy' -g !'*~' -g !'*#' -Nl "^#! .+/perl" "$(realpath "$dname")" 2> /dev/null
        done
    fi
else
    # rg is not available; use recursive grep:
    # -l : just list file name
    # -r: recursive
    # -E: extended regular expressions
    # As it might iterate over files that have restricted access: wipe error messages
    if [ -z "$1" ]; then
        grep -l --exclude '*.tdy' --exclude '*~' --exclude '*#'  -r -E "^#! .+/perl" "$(realpath .)" 2> /dev/null
    else
        for dname in "$@"; do
            grep -l --exclude '*.tdy' --exclude '*~' --exclude '*#' -E -r "^#! .+/perl" "$(realpath "$dname")" 2> /dev/null
        done
    fi
fi

case "$search_with" in
    find)
        find -L                        \
             ${find_path_option} "$@"  \
             \(  -name "*.p[lm]"       \
             -or -name "*.pl[sx]"      \
             -or -name "*.xs"          \
             -or -name "*.t"           \
             -or -name "*.pod"         \
             -or -name "*.cgi"         \
             -or -name "*.psg"         \
             -or -name "*.psgi"        \
             \)  -print 2> /dev/null
        ;;

    fd)
        ${fd_pgm} --absolute-path \
                  --follow           \
                  --type f           \
                  --type l           \
                  -e .pl             \
                  -e .pm             \
                  -e .pls            \
                  -e .plx            \
                  -e .xs             \
                  -e .t              \
                  -e .pod            \
                  -e .cgi            \
                  -e .psg            \
                  -e .psgi           \
                  . "$@" 2> /dev/null
        ;;

    *)
        printf -- "etags-perl ** Error: cannot identify find program!\n"
        exit 1
        ;;
esac

# ----------------------------------------------------------------------------
# Local Variables:
# sh-shell: /bin/sh
# End:
