#!/bin/sh
# SH FILE: mk-diffo
#
# Purpose   : Make a new object file diff to track evolution of a source file.
# Created   : Thursday, June 13 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-07-05 15:12:07 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------

# Module Description
# ------------------
#
# Setup and construct the evolution tree of a source code file and its
# corresponding object file, comparing the generated assembler as the file
# evolves from version to version.
#
# **To use it**:
#
#  - Make sure you compile the C/C++ source files with debugging activated.
#  - Specialize your shell by executing: use-mkdiffo
#
#        - That is an alias to the file $USRHOME_DIR/ibin/envfor-mkdiffo
#        - This identifies the following:
#
#          - USRHOME_DIFFO_ROOT_DIR: The directory tree where all files are stored.
#          - USRHOME_DIFFO_PROJECT : The project name; used as a sub-directory
#                                    in the main directory tree.
#          - USRHOME_DIFFO_FNAME   : The full path to the source code file checked.
#          - USRHOME_DIFFO_OBJ_DIR : The full path of the directory holding the
#                                    the object file resulting from the compilation
#                                    of the source code file.
#
#        - When executing mk-diffo, the extra information is passed:
#
#          - The file version number, starting at 0 and incremented each time
#            the mk-diffo command is issued for the specific project.
#
# **Directory Tree**:
#
# All files are stored inside a single directory tree. The directory tree has
# four directory levels:
#  - The root directory identified by USRHOME_DIFFO_ROOT_DIR (here, ~/my/results/diffo).
#  - The project name, identified by USRHOME_DIFFO_PROJECT (in the following
#    diagram you can see two projects: proj-1 and proj-2.)  Any name can be
#    used.
#  - The file name, identified by USRHOME_DIFFO_FNAME.  Inside the proj-1, we
#     can see file-a.c and file-b.c.  In project-2 we can see pel.cpp.
#  - The test number, starting at 0.
#
# Here's an example:
#
#          ~/my/results
#          └── diffo
#              ├── proj-1
#              │   ├── file-a.c
#              │   │   ├── 000
#              │   │   │   ├── file-a.asm
#              │   │   │   ├── file-a.c
#              │   │   │   └── file-a.o
#              │   │   └── 001
#              │   │       ├── file-a.asm
#              │   │       ├── file-a.c
#              │   │       └── file-a.o
#              │   └── file-b.c
#              │       ├── 000
#              │       │   ├── file-b.asm
#              │       │   ├── file-b.c
#              │       │   └── file-b.o
#              │       ├── 001
#              │       │   ├── file-b.asm
#              │       │   ├── file-b.c
#              │       │   └── file-b.o
#              │       └── 002
#              │           ├── file-b.asm
#              │           ├── file-b.c
#              │           └── file-b.o
#              └── proj-2
#                  └── pel.cpp
#                      └── 000
#                          ├── pel.asm
#                          ├── pel.cpp
#                          └── pel.o
#
#
# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# - The shell environment must have been previously setup by sourcing
#   $USRHOME_DIR/ibin/envfor-mkdiffo to set up the following environment
#   variables:
#
#          - USRHOME_DIFFO_ROOT_DIR: The directory tree where all files are stored.
#          - USRHOME_DIFFO_PROJECT : The project name; used as a sub-directory
#                                    in the main directory tree.
#          - USRHOME_DIFFO_FNAME   : The source code file name.
#          - USRHOME_DIFFO_OBJ_DIR : The full path of the directory holding the
#                                    the object file resulting from the compilation
#                                    of the source code file.
#
# - Uses the following idiom to remove leading zeroes and prevent
#   interpretation as octal:
#
#          var=$( expr "$var" + 0 )
#

# ----------------------------------------------------------------------------

refno=
print_usage()
{
    printf -- "\
mk-diffo - Store another file set and compare object files.

  Usage mk-diffo [[-w | --with-source] [-s | --string] [-l | --less]] [REFNO]
        mk-diffo -h | --help

     Store the source and object file inside the mk-diffo directory tree
     for the current file and reference number, then compare the object file
     with the object file for the previous version or the version specified by
     REFNO.

     REFNO : optional reference number.  Default is last one created.
             It must be a valid integer.
             Leading 0 are accepted, but remain a base-10 value.

     Options passed to diffo:
     - -w | --with-source : insert C/C++ source code in the generated assembler.
     - -s | --string      : also compare strings extracted from files.
     - -l | --less        : pipe differences to less

  ENVIRONMENT:

    - USRHOME_DIFFO_ROOT_DIR: The directory tree where all files are stored.
    - USRHOME_DIFFO_PROJECT : The project name; used as a sub-directory
                              in the main directory tree.
    - USRHOME_DIFFO_FNAME   : The source code file name.
    - USRHOME_DIFFO_OBJ_DIR : Directory name of the corresponding object file.
    - USRHOME_DIFFO_OBJEXT  : Object file extension. Include leading period.
                              Defaults to \".o\".
                              Use \" \" for extension-less files
                              if you want to analyze single source file
                              executable files.

    The current setup is:

    - USRHOME_DIFFO_ROOT_DIR: %s
    - USRHOME_DIFFO_PROJECT : %s
    - USRHOME_DIFFO_FNAME   : %s
    - USRHOME_DIFFO_OBJ_DIR : %s
    - USRHOME_DIFFO_OBJEXT  : '%s'
" "$USRHOME_DIFFO_ROOT_DIR" \
           "$USRHOME_DIFFO_PROJECT" \
           "$USRHOME_DIFFO_FNAME" \
           "$USRHOME_DIFFO_OBJ_DIR" \
           "$USRHOME_DIFFO_OBJEXT"
}

# --
# validate arguments

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    # help requested explicitly: no error.
    exit 0
fi

# check for optional switches.
with_source=
with_strings=
with_less=
options=3
while [ "$options" -ge 1 ]; do
    if [ "$1" = "-w" ] || [ "$1" = "--with-source" ]; then
        with_source="-w"
        shift
    elif [ "$1" = "-s" ] || [ "$1" = "--strings" ]; then
        with_strings="-s"
        shift
    elif [ "$1" = "-l" ] || [ "$1" = "--less" ]; then
        with_less="-l"
        shift
    fi
    options=$(( options - 1 ))
done

# Check that REFNO is a valid integer (no leading 0 allowed)
if [ -n "$1" ]; then
    case "$1" in
        -*)
            # unexpected option?
            printf -- "*** mk-info ERROR: %s is not a valid option!\n" "$1"
            printf -- "    print usage with -h\n"
            exit 1
            ;;

        (*[!0123456789]*)
            # anything before or after a ASCII digit is not allowed
            printf -- "*** mk-info ERROR: %s is not a valid integer!\n" "$1"
            printf -- "    print usage with -h\n"
            exit 1
            ;;

        *)
            # only numbers are allowed.
            # shellcheck disable=SC2003 # $(()) consider leading zeroes as octal
            refno=$( expr "$1" + 0)
            ;;
    esac
fi

# Check if there are any extra argument.
if [ -n "$2" ]; then
    printf -- "*** mk-diffo ERROR: too many arguments.\n"
    printf -- "    print usage with -h\n"
    exit 1
fi

# --
# Check environment

# Create short variable names
db_root="${USRHOME_DIFFO_ROOT_DIR}"
project_name="${USRHOME_DIFFO_PROJECT}"
fpathname="$USRHOME_DIFFO_FNAME"

# First check if the name of the tested source code file is identified.
if [ -z "$fpathname" ]; then
    printf -- "\
*** mk-diffo ERROR: tested file, USRHOME_DIFFO_FNAME, name not defined!\n"
    printf -- "    print usage with -h\n"
    exit 1
fi
if [ ! -f "$fpathname" ]; then
    printf -- "\
*** mk-diffo ERROR: tested source code file name,
                    identified by USRHOME_DIFFO_FNAME, does not exists!
                    USRHOME_DIFFO_FNAME: %s
" "$fpathname"
    printf -- "    print usage with -h\n"
    exit 1
fi

# Identify the basename of the tested source code file;
# it will be used as a directory name.
fbasename=$(basename "$fpathname")
filename_noext="${USRHOME_DIFFO_FNAME%.*}"
if [ -z "$USRHOME_DIFFO_OBJEXT" ]; then
    obj_ext=".o"
elif [ "$USRHOME_DIFFO_OBJEXT" = " " ]; then
    obj_ext=""
else
    obj_ext="${USRHOME_DIFFO_OBJEXT}"
fi
obj_filename="${USRHOME_DIFFO_OBJ_DIR}/${filename_noext}${obj_ext}"
obj_basename="$(basename "$obj_filename")"
# printf "obj_filename = %s\n" "$obj_filename"
# printf "filename_noext = %s\n" "$filename_noext"
# printf "obj_filename = %s\n" "$obj_filename"

# Now check the validity of the result directory tree named by the environment
if [ -z "$db_root" ]; then
    printf -- "\
*** mk-diffo ERROR: USRHOME_DIFFO_ROOT_DIR is not defined!\n"
    printf -- "    print usage with -h\n"
    exit 1
elif [ ! -d "$db_root" ]; then
    printf -- "\
*** mk-diffo ERROR: USRHOME_DIFFO_ROOT_DIR is invalid: %s
" "$db_root"
    printf -- "    print usage with -h\n"
    exit 1
fi
if [ -z "$USRHOME_DIFFO_PROJECT" ]; then
    printf -- "\
*** mk-diffo ERROR: USRHOME_DIFFO_PROJECT is not defined!\n"
    printf -- "    print usage with -h\n"
    exit 1
elif [ ! -d "${db_root}/${project_name}" ]; then
    printf -- "\
*** mk-diffo ERROR: USRHOME_DIFFO_PROJECT is invalid: %s
     %s/%s : does not exist!
" "$USRHOME_DIFFO_PROJECT" "$db_root" "$USRHOME_DIFFO_PROJECT"
    printf -- "    print usage with -h\n"
    exit 1
fi

# Check if the directory for the source file exists.
# If it does not exists, create it, and set the reference number to 0.
if [ ! -d "${db_root}/${project_name}/${fbasename}" ]; then
    if ! mkdir -p "${db_root}/${project_name}/${fbasename}"; then
       printf -- "\
*** mk-diffo ERROR: Failed creating %s
" "${db_root}/${project_name}/${fbasename}"
       printf -- "    print usage with -h\n"
       exit 1
    elif mkdir -p "${db_root}/${project_name}/${fbasename}/000"; then
        refno=0
    else
       printf -- "\
*** mk-diffo ERROR: Failed creating %s/000
" "${db_root}/${project_name}/${fbasename}"
       printf -- "    print usage with -h\n"
       exit 1
    fi
fi

# --
# Identify the last reference number for the current root/project/file
# and proceed.

if [ "$refno" = "0" ]; then
    # NEW FILE!
    # ---------
    # This is a new file.  There's no previous recorded files.
    # No comparison is possible yet for this source code file.
    # Copy the source code and object file here.
    printf -- "\
mk-diffo - Creating a new entry: %s/%s/%s/000
" "${db_root}" "${project_name}" "${fbasename}"

    trgt_dir=$(printf -- "%s/%s/%s/000" "${db_root}" "${project_name}" "${fbasename}")
    cp "$fpathname" "$trgt_dir"     || exit 1
    cp "$obj_filename" "$trgt_dir"  || exit 1

else
    # EXITING FILE - New VERSION
    # --------------------------
    rootdir="${db_root}/${project_name}/${fbasename}"
    nextref=0
    # shellcheck disable=SC2044 # the find-based loop fragility is prevented
    #                           # by the content of the directory: only
    #                           # sub-directories with numbers as names
    for dname in $(find "${rootdir}" -type d ); do
        if [ ! "$dname" = "${rootdir}" ]; then
            n1="$(basename "$dname")"
            # shellcheck disable=SC2003 # $(()) consider leading zeroes as octal
            number=$(expr "$n1" + 0)
            next=$(( number + 1))
            if [ ${next} -gt ${nextref} ]; then
                nextref=${next}
            fi
            # printf -- "-> [%s] -> [%s] -> [%03d]\n" "$dname" "$number" "$next"
        fi
    done
    tdir="${db_root}/${project_name}/${fbasename}"
    if [ -z "$refno" ]; then
        refno=0
    elif [ "${refno}" -ge "${nextref}" ]; then
        printf -- "\
*** mk-diffo ERROR: specified REFNO (%s) is invalid: must be smaller than %s.
" "$refno" "$nextref"
        printf -- "    print usage with -h\n"
        exit 1
    fi
    orig_dir=$(printf -- "%s/%03d" "$tdir" "${refno}")
    trgt_dir=$(printf -- "%s/%03d" "$tdir" "${nextref}")
    printf -- "\
mk-diffo - New version: %s\n" "${trgt_dir}"
    mkdir -p "${trgt_dir}"
    cp "$fpathname"    "$trgt_dir"  || exit 1
    cp "$obj_filename" "$trgt_dir"  || exit 1

    obj1="${orig_dir}/${obj_basename}"
    obj2="${trgt_dir}/${obj_basename}"
    # echo "diffo ${with_source} ${with_strings} ${obj1} ${obj2}"
    diffo ${with_source} ${with_strings} ${with_less} "${obj1}" "${obj2}"
fi

# ----------------------------------------------------------------------------
# Local Variables:
# sh-shell: sh
# End:
