#!/bin/sh
# SH FILE: au-format
#
# Purpose   : Import format audit log records.
# Created   : Sunday, November  3 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-11-22 17:47:59 EST, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# Filter script: formats each line from stdin.
# The lines are expected to be audit log lines.


# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# - GNU awk

# ----------------------------------------------------------------------------
# Code
# ----
#
#

print_usage()
{
    printf -- "\
au-format: Filter program. Reformat stdin audit lines.
          Expects lines with format similar to var/log/audit/audit.log.
          - If used on Linux, uses 'ausearch -i' to interpret every field,
            then proceed with extra formatting:
            - line up the first field (record type name)
            - remove ID sequence separator lines
            - add a line counter when used in file oriented.
          - If used on a system where ausearch is not available, performs
            as much formatting as possible.
            - Change time to human readable format.
            - Replace syscall numbers by their function name.
            - Improve line up my using fixed size for record type name.
            - Unless --line-oriented is specified:
              - Prefix each line with a record number

          In file oriented, print a report at the end counting AVC records.

 Usage:  au-format [--line-oriented]
         au-format -h|--help

    This is a file-oriented filter by default.

    To process each line separately, as required for a filter
    used with 'tail -f' you must specify the --line-oriented option.

 Examples:
  sudo cat /var/log/audit/audit.log | au-format
  sudo tail -f | au-format --line-oriented

"
}


# --
# Validate arguments

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    # help requested explicitly: no error.
    exit 0
fi

# --
# Is command for line oriented or file oriented filtering?

line_oriented=0
if [ -n "$1" ]; then
    case "$1" in
        --line-oriented )
            line_oriented=1
            ;;

        *)
            printf -- "\
*** ERROR: au-format: invalid option: %s
           Use: 'au-format -h' to print usage.\n" "$1"
            exit 1
            ;;
    esac
fi

# --
# If running on Linux and ausearch is available, use ausearch -i
# to provide the bulk of log interpretation and complete the format
# with awk.

use_ausearch="no"
if [ "$(uname)" = "Linux" ]; then
    if which ausearch > /dev/null 2>&1; then
        use_ausearch="yes"
    fi
fi


# --
# Generate the syscall look-up table as an included AWK file
# Store it inside the user's tmp directory.

lookup_fname="$USRHOME_DIR/bin/other/ausyscall-lookup.awk"
lookup_dname="$USRHOME_DIR/bin/other"
generate_pgm="$USRHOME_DIR/bin/linux/au-gensyscall-lookup"

if [ ! -f "${lookup_fname}" ]; then
    "${generate_pgm}" > "${lookup_fname}"
fi
if [ ! -f "${lookup_fname}" ]; then
    printf -- "\
*** ERROR: au-format: Missing file: %s
           This file should have been generated by %s
           invoked by au-format.
" "${lookup_fname}" "${generate_pgm}" 1>&2
    exit 1
fi

# --
# Proceed
# Execute the linup filter at the end: the other filters expect
# a log line format that has only 1 space separating first fields.

AWKPATH=".:${lookup_dname}"
export AWKPATH

# Note: setting AWKPATH does not seem to work for all systems,
#       as a work-around change current directory to the location
#       of the lookup file, the file that the awk script includes.
cd "${lookup_dname}" || exit 1

if [ "$use_ausearch" = "yes" ]; then
    # use grep to remove the separator line; easier than with awk.
    # Also use sed to get rid of " : " after the time stamp; also easier than with awk.
    if [ "${line_oriented}" = "1" ]; then
        ausearch -i | grep -v '^----$' | awk -f "$USRHOME_DIR/bin/other/au-extra-format.awk" - | sed 's/) : /): /g'
    else
        ausearch -i | grep -v '^----$' | awk -f "$USRHOME_DIR/bin/other/au-extra-format-count.awk" - | sed 's/) : /): /g'
    fi
else
    if [ "${line_oriented}" = "1" ]; then
        awk -f "$USRHOME_DIR/bin/other/au-log-lineup.awk" -
    else
        # Filter as a file, generating a line count.
        awk -f "$USRHOME_DIR/bin/other/au-log-lineup-count.awk" -
    fi
fi

# ----------------------------------------------------------------------------
# Local Variables:
# sh-shell: /bin/sh
# End:
