#!/bin/sh
# SH FILE: au-format
#
# Purpose   : Import format audit log records.
# Created   : Sunday, November  3 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2025-02-24 09:41:16 EST, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# Filter Script.
#  Reformat the audit log lines: expand time and several other fields into
#  human-readable format.
#
# This script filters lines provided to stdin.
# You can use it in one of the 2 following ways:
#
# - In file mode, where a complete log file is piped into au-format
#   which prints the formatted output to its stdout.
# - In line-oriented mode, with the help of stdbuf -oL to
#   process one line at a time when tailing the log file, allowing
#   you to see in real-time the reformatted lines as events occur.
#
#
# Note:  inside Emacs you can reformat a portion of a log file inside an Emacs
#        buffer by using the shell-command-on-region command (bound to 'M-|')
#        and passing it to au-format

# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# - GNU awk
# - stdbuf (from coreutils) should be used on the command line.

# ----------------------------------------------------------------------------
# Code
# ----
#
#

print_usage()
{
    printf -- "\
au-format: Filter program. Reformat stdin audit lines.
          Expects lines with format similar to var/log/audit/audit.log.
          - If used on Linux, uses 'ausearch -i' to interpret every field,
            then proceed with extra formatting:
            - line up the first field (record type name)
            - remove ID sequence separator lines
            - add a line counter when used in file oriented.
          - If used on a system where ausearch is not available, performs
            as much formatting as possible.
            - Change time to human readable format.
            - Replace syscall numbers by their function name.
            - Improve line up my using fixed size for record type name.
            - Unless --line-oriented is specified:
              - Prefix each line with a record number

          In file oriented, print a report at the end counting AVC records.

 Usage:  au-format [--line-oriented] [--no-ausearch]
         au-format -h|--help

    This is a file-oriented filter by default.

    To process each line separately, as required for a filter
    used with 'tail -f' you must specify the --line-oriented option.

 Examples:
  sudo cat /var/log/audit/audit.log | au-format
  sudo tail -f /var/log/audit/audit.log | stdbuf -oL au-format --line-oriented

  or: under su or with sudo copy the audit log files somewhere else,
      update their access and then use the following command:

      cat path/to/the/audit.lg | au-format --no-ausearch

 Notes:

 - Unless you are su, you would normally have to issue the command
   under sudo to get permission to access the audit logs.

   If you have a copy of the audit log files with appropriate rights
   you can run the au-format with the '--no-ausearch' option: it will
   allow processing of the content without trying to access the /var/log/audit
   files allowing you tom run the command without being su or under sudo.

 - When monitoring the audit log in 'real-time' with 'tail -f'
   it is best to pipe it into 'stdbuf -oL' to force the pipes to
   flush on each line, instead of the default used by the various
   programs in the pipe.  This way the lines will be processed as
   they are reported by tail and the output will be printed as soon
   as possible.  If you do not use 'stdbuf -oL', any of the programs
   in the pipe may retain information due to their buffering and that
   will prevent you from seeing the events as they occur because their
   printing will be delayed by the internal buffering of the programs.

"
}


# --
# Validate arguments

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    # help requested explicitly: no error.
    exit 0
fi

# --
# Is command for line oriented or file oriented filtering?

allow_ausearch="yes"
line_oriented=0
arg_count=$#
while [ "$arg_count" -ge 1 ]; do
    if [ -n "$1" ]; then
        case "$1" in
            --line-oriented )
                line_oriented=1
                ;;

            --no-ausearch )
                allow_ausearch="no"
                ;;

            *)
                printf -- "\
*** ERROR: au-format: invalid option: %s
           Use: 'au-format -h' to print usage.\n" "$1"
                exit 1
                ;;
        esac
    fi
    arg_count=$(( arg_count - 1 ))
    shift
done

# --
# If running on Linux and ausearch is available and allowed, then
# use ausearch -i to provide the bulk of log interpretation.
#  Since this is not doing the exact formatting required,
#  complete the reformatting with an awk script.
# When not using ausearch -i, do the complete translation using awk.

use_ausearch="no"
if [ "$(uname)" = "Linux" ]; then
    if [ "$allow_ausearch" = "yes" ]; then
        if which ausearch > /dev/null 2>&1; then
            use_ausearch="yes"
        fi
    fi
fi


# --
# Generate the syscall look-up table as an included AWK file
# Store it inside the user's tmp directory.

lookup_fname="$USRHOME_DIR/bin/other/ausyscall-lookup.awk"
lookup_dname="$USRHOME_DIR/bin/other"
generate_pgm="$USRHOME_DIR/bin/linux/au-gensyscall-lookup"

if [ ! -f "${lookup_fname}" ]; then
    "${generate_pgm}" > "${lookup_fname}"
fi
if [ ! -f "${lookup_fname}" ]; then
    printf -- "\
*** ERROR: au-format: Missing file: %s
           This file should have been generated by %s
           invoked by au-format.
" "${lookup_fname}" "${generate_pgm}" 1>&2
    exit 1
fi

# --
# Proceed
# Execute the linup filter at the end: the other filters expect
# a log line format that has only 1 space separating first fields.

AWKPATH=".:${lookup_dname}"
export AWKPATH

# Note: setting AWKPATH does not seem to work for all systems,
#       as a work-around change current directory to the location
#       of the lookup file, the file that the awk script includes.
cd "${lookup_dname}" || exit 1

if [ "$use_ausearch" = "yes" ]; then
    # use grep to remove the separator line; easier than with awk.
    # Also use sed to get rid of " : " after the time stamp; also easier than with awk.
    if [ "${line_oriented}" = "1" ]; then
        ausearch -i | grep -v '^----$' | awk -f "$USRHOME_DIR/bin/other/au-extra-format.awk" - | sed 's/) : /): /g'
    else
        ausearch -i | grep -v '^----$' | awk -f "$USRHOME_DIR/bin/other/au-extra-format-count.awk" - | sed 's/) : /): /g'
    fi
else
    if [ "${line_oriented}" = "1" ]; then
        awk -f "$USRHOME_DIR/bin/other/au-log-lineup.awk" -
    else
        # Filter as a file, generating a line count.
        awk -f "$USRHOME_DIR/bin/other/au-log-lineup-count.awk" -
    fi
fi

# ----------------------------------------------------------------------------
# Local Variables:
# sh-shell: /bin/sh
# End:
