#!/bin/sh
# SH FILE: showpath
#
# Purpose   : Print current PATH, one directory per line.
# Created   : Monday, March  4 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-05-28 17:09:06 EDT, updated by Pierre Rouleau>
#
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# Print PATH's elements, one per line.
# Usage: showpath [-n] [[MAN|LIB][PATH]|[[USRHOME_]ORIGINAL[_PATH]]
#
#  -n: when specified, a left justified number is printed on each line.
#
# On error,
# - Print error on stderr.
# - Exit code: 1:  invalid argument(s).
#              2:  specified environment variable is not defined.
#              3:  format of specified environment variable is incorrect.
#
# Examples:
#
#  showpath
#  showpath -n
#  showpath -n PATH
#  showpath LIB
#  showpath LIBPATH
#  showpath -n LIBPATH
#  showpath -n ORIGINAL
#  showpath -n ORIGINAL_PATH
#  showpath -n USRHOME_ORIGINAL_PATH

# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# printf, sed, nl, tr

# ----------------------------------------------------------------------------
# Code
# ----
#
#
print_usage()
{
    printf "\
showpath: show content of PATH-like environment variable.

 Usage: showpath [-n]  [[LIB|MAN|envvar]|PATH]
        showpath [-h|--help]

    - '-n' : print a numbered list.
    - The other argument identifies the environment variable.
      With noting specified, use PATH.
      Otherwise, use LIB or LIBPATH for LIBPATH, or
                 use MAN or MANPATH for MANPATH, or
                 use the name of the environment variable
                 specified as argument.
    - When MANPATH is undefined, showpath displays
      the information provided by manpath (if available).
"
}

print_error()
{
    >&2 printf "\
***ERROR***
 - showpath: %s
***********
" "$1"
    print_usage
    exit 1
}



if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    exit 0
fi

numbered='false'
# Parse command line arguments
if [ -n "$2" ]; then
    # there's 2 arguments. Check if one of them is -n
    if [ "$1" = "-n" ]; then
        vname="$2"
        numbered='true'
    else
        print_error "Unsupported option for 2 arguments"
    fi
else
    if [ -z "$1" ]; then
        # No argument
        vname="PATH"
    else
        # 1 argument (or more than 2, but ignore the ones after 2)
        # and don't support -n after the variable name.
        if [ "$1" = "-n" ]; then
            vname="PATH"
            numbered='true'
        else
            vname="$1"
        fi
    fi
fi



show_path()
{
    # vname: string: name of path envvar: PATH, LIBPATH or MANPATH.
    #                It also supports: ORIGINAL, ORIGINAL_PATH or USRHOME_ORIGINAL_PATH
    #                to show the value of USRHOME_ORIGINAL_PATH
    # numbered: 'true' or 'false'

    eval path_value='$'$vname
    if [ -z "$path_value" ]; then
        >&2 echo "WARNING: $vname is not defined!"
        if [ "$vname" = "MANPATH" ]; then
            if command -v manpath > /dev/null 2>&1; then
                if [ -n "$(manpath)" ]; then
                    >&2 echo " However the manpath command provides the list:"
                    if [ "$numbered" = "true" ]; then
                        manpath | tr ':' '\n' | nl -b a -n ln
                    else
                        printf -- "- "
                        manpath | sed 's/:/:- /g' | tr ':' '\n'
                    fi
                    exit 0
                fi
            fi
        fi
        exit 2
    else
        if [ "$numbered" = "true" ]; then
            echo "$path_value" | tr ':' '\n' | nl -b a -n ln
        else
            printf -- "- "
            echo "$path_value" | sed 's/:/:- /g' | tr ':' '\n'
        fi
        if echo "$path_value" | grep '::' > /dev/null; then
            >&2 echo "ERROR: $vname has empty entries!"
            exit 3
        elif echo "$path_value" | grep '^:' > /dev/null; then
            >&2 echo "ERROR: $vname starts with an empty entry!"
            exit 3
        elif echo "$path_value" | grep ':$' > /dev/null; then
            >&2 echo "ERROR: $vname ends with an empty entry!"
            exit 3
        fi
    fi
}


# Parse further: check vname: only allow the valid ones
# since their name will be passed to eval; don't allow
# user input to be eval'ed; that would be a security risk.
# Print the path using show_path function for the valid
# variable names.
case $vname in
    'PATH')
        vname="PATH"
        show_path
        ;;

    'LIB'|'LIBPATH')
        vname="LIBPATH"
        show_path
        ;;

    'MAN'|'MANPATH')
        vname="MANPATH"
        show_path
        ;;

    'ORIGINAL' | 'ORIGINAL_PATH' | 'USRHOME_ORIGINAL_PATH')
        vname="USRHOME_ORIGINAL_PATH"
        show_path
        ;;
    *)
        show_path
esac








# ----------------------------------------------------------------------------
