# Sourced script: envfor-info  -*- mode: sh; -*-
#
# Purpose   : Extend the INFOPATH to all directories that contain some.
# Created   : Friday, May 31 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-08-05 17:15:00 rouleaup>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# Find info directories in standard locations and add them to the INFOPATH
# environment variable.
#
# The Emacs source code is expected to be identified by the
# USRHOME_EMACS_SRC_DIR environment variable.  If it exists and the identified
# directory has a src and info sub-directories, the info directory is added to
# the INFOPATH.
#
# The scanning for info directories may take some time.  Therefore its' only
# done once per shell process tree.  Also, the list of directories is stored
# inside the ~/.infopath.txt file.  On next invocations, the content of the
# file is used and no scanning is performed.
#
# To force a scan, use the --refresh option.

# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# - $USRHOME_DIR/bin/find-dir
# - printf, realpath
#
# Invoke it as:  use-info [--refresh]

# ----------------------------------------------------------------------------
# Code
# ----
#

print_usage()
{
    printf -- "
use-info -- Add 'info' directories to the INFOPATH environment variable.

 Usage: use-info [--refresh]
        use-info -h|--help

  OPTION:  --refresh  : Force a new scan for info directories, replacing
                        the value previously used and updating the cache
                        file ~/.infopath.txt  (see below).
                        By default it is only done once.  The script
                        remembers it has already run by setting the
                        USRHOME__INFO_IS_SET environment variable to 1
                        and will not scan again if invoked again, unless
                        the --refresh option is specified.

  FILES:
    ~/.infopath.txt   : Stores the list of info directories found by the scan.
                        This acts as a cache, used by subsequent executions.
                        This way, when this script is invoked by the shell
                        configuration, a lengthy file scan is only performed
                        once until the file is explicitly deleted or the
                        command is invoked with  the --refresh option.

  ENVARS:
  - INFOPATH              : A colon-separated list of directories where Emacs
                            and the info utility look for info files.
                            The use-info program initializes that environment
                            variable.
  - USRHOME_DIR_EMACS_SRC : If this exists, it must identify the root directory
                            of Emacs source code Git repository.  If you built
                            Emacs from its source code, that will have a info
                            directory that use-info will add to the INFOPATH.
                            To use this, update the

  - HOMEBREW_PREFIX       : On systems using Homebrew, optionally identifies
                            the directory tree where Homebrew stores the files.
                            The use-info search for info sub-directories in it
                            when the environment variable is set and identifies
                            a existing directory.
"
}

print_error()
{
    # Arg 1: string: error message
    # Arg 2: optional - secondary error.

    errmsg="$1"
    if [ -n "$2" ]; then
        errarg=": $2"
    else
        errarg=""
    fi
    printf -- "\
*** use-info ERROR - %s %s
     Use use-info -h to print its command line usage.
" "${errmsg}"  "${errarg}"
}


# ----------------------------------------------------------------------------
# 1 - Validate command line

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    # help requested explicitly: no error.
    return 0
fi

if [ -n "$1" ]; then
    case "$1" in
        "--refresh")
        ;;

        *)
            print_error "Invalid argument" "$1"
            return 1
            ;;
    esac
fi

# ----------------------------------------------------------------------------
# 2 - Determine if shell is interactive
# -------------------------------------
case "$-" in
    *i*)
        SHELL_IS_INTERACTIVE=true
        ;;
    *)
        SHELL_IS_INTERACTIVE=false
        ;;
esac

# ----------------------------------------------------------------------------
# 3 - Initialize

orig_INFOPATH=${INFOPATH}
config_filepath="$HOME/.infopath.txt"

# --
# 4 - Define variable and function

new_dir_count=0

append_to_infopath()
{
    # Arg1 : root directory name
    root_dname="$1"

    # echo "TOP Checking: ${root_dname}"

    # To support path with embedded spaces, set IFS to new line.
    # Do it in a POSIX way.  IFS=$'\n' is not supported in POSIX.
    # One POSIX way is to use printf.  Another is to use an explicit new line.
    IFS="
"
    for dname in $(find-dir info "${root_dname}" 2> /dev/null ); do
        # echo "Checking: ${dname}"
        # Extra consistency check
        if [ -d "${dname}" ]; then
            r_dname="$(realpath "${dname}")"
            if [ -z "$INFOPATH" ]; then
                INFOPATH="${r_dname}"
                echo "${r_dname}" >> "${config_filepath}"
                new_dir_count=$(( new_dir_count + 1 ))
            else
                already_in="false"
                case "$INFOPATH" in
                    *"${r_dname}"*)
                        already_in="true"
                        ;;
                esac
                if [ "$already_in" = "false" ]; then
                    INFOPATH="$INFOPATH":"${r_dname}"
                    echo "${r_dname}" >> "${config_filepath}"
                    new_dir_count=$(( new_dir_count + 1 ))
                fi
            fi
        else
            if [ "$SHELL_IS_INTERACTIVE" = "true" ]; then
                printf -- "Skipping invalid dname: %s\n" "${dname}"
            fi
        fi

    done
    unset already_in
}

# 5 - Proceed: do the processing once per shell tree unless a --refresh
#              is requested. Don't repeat in a sub-shell unless a --refresh is
#              requested.
#

if [ -z "$USRHOME__INFO_IS_SET" ] || [ "$1" = "--refresh" ]; then
    if [ "$1" = "--refresh" ] || [ ! -f "${config_filepath}" ]; then
        # perform a new scan
        if [ "$SHELL_IS_INTERACTIVE" = "true" ]; then
            printf -- ". Scanning for info directories...\n"
        fi
        if [ -f "${config_filepath}" ]; then
            # delete existing config file
            rm -f "${config_filepath}"
            INFOPATH=
        fi

        # Add info directories from Emacs source code tree
        # if this is available.
        if [ -n "$USRHOME_DIR_EMACS_SRC" ] &&
               [ -d "$USRHOME_DIR_EMACS_SRC/src" ] &&
               [ -d "$USRHOME_DIR_EMACS_SRC/info" ]; then
            append_to_infopath "${USRHOME_DIR_EMACS_SRC}"
        fi

        # If Homebrew is used, add Homebrew info directories in the Homebrew tree.
        if [ -n "$HOMEBREW_PREFIX" ] &&
               [ -d "$HOMEBREW_PREFIX" ]; then
            append_to_infopath "${HOMEBREW_PREFIX}"
        fi

        # On Linux, add the info directories located inside the
        # /usr directory tree
        case "$(uname)" in

            Linux)
            append_to_infopath "/usr"
            ;;
        esac

        # Export the new INFOPATH
        if [ ! "${new_dir_count}" = "0" ]; then
            if [ "$SHELL_IS_INTERACTIVE" = "true" ]; then
                printf -- " added %d directories to INFOPATH.\n" ${new_dir_count}
                printf -- "   Use 'showpath INFOPATH' to see it.\n"
            fi
            if [  "${orig_INFOPATH}" != "" ]; then
                export orig_INFOPATH
                if [ "$SHELL_IS_INTERACTIVE" = "true" ]; then
                    printf -- "   Original INFOPATH was: \n"
                    showpath -n orig_INFOPATH
                fi
            fi
        else
            if [ "$SHELL_IS_INTERACTIVE" = "true" ]; then
                printf "No info directory found!\n"
            fi
        fi

    else
        # set INFOPATH from the paths stored in the ${config_filepath} file.
        dir_count=0
        while IFS='' read -r infopath_line || [ -n "${infopath_line}" ]; do
            # echo "processing line: ${infopath_line}"
            if [ -z "$INFOPATH" ]; then
                INFOPATH="${infopath_line}"
            else
                INFOPATH="$INFOPATH":"${infopath_line}"
            fi
            dir_count=$(( dir_count + 1 ))
        done < "${config_filepath}"
        if [ "$SHELL_IS_INTERACTIVE" = "true" ]; then
            printf -- "\
. Setting INFOPATH from ~/.infopath.txt with %d directories.
" "${dir_count}"
        fi
        unset dir_count
    fi
    export INFOPATH
    USRHOME__INFO_IS_SET=1
    export USRHOME__INFO_IS_SET
fi

# -- Cleanup

unset orig_INFOPATH

# ----------------------------------------------------------------------------
# Local Variables:
# sh-shell: sh
# End:
