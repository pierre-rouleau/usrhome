# Sourced script: do-cd-to  -*- mode: sh; -*-
#
# Purpose   : Search for file in directory tree, if founcd ccd to its directory.
# Created   : Thursday, March 27 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-05-03 17:10:03 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# Searches for a file inside the current directory tree.
#
# If ONE file is found, changes the current directory to the directory that
# holds that file.
#
# If it finds SEVERAL files:
# - Print a cautionary note, listing the count and the files found.
# - If the EDITOR environment variable is set, prompt the user for editing the
#   files. If the user accepts open the editor on the found files.
#
# EXIT CODE:
#  - 0: ONE file found
#  - 1: NO file found
#  - n: number of file found, regardless if they were edited or not.

# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# - fd : see https://github.com/sharkdp/fd "
#   - To install fd:
#      - On macOS:  brew install fd
#

# ----------------------------------------------------------------------------
# Code
# ----
#
#

# Set usrhome__running_shell to zsh, bash or unknown
. "$USRHOME_DIR/ibin/which-shell"


prompt_yn_return=
prompt_yn()
{
    # Arg 1: string prompt
    while true; do
        printf "%s [yn]? " "$1"
        read -r yn
        case $yn in
            [Yy]* )
                prompt_yn_return=y
                break
                ;;
            [Nn]* )
                prompt_yn_return=n
                break
                ;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

print_usage()
{
    echo " Usage: cd-to [-H] FILENAME"
    echo " Change the current directory to the sub-directory holding FILENAME."
    echo " FILENAME may use gob syntax supported by fd."
    echo " Does not search hidden directories unless -H option is passed."
}

# Check for availability of the fd command.
if ! command -v fd > /dev/null 2>&1; then
    echo "ERROR: the fd command is not available!"
    echo "  See: https://github.com/sharkdp/fd "
    echo "  Install it with your package manager."
    return 1
fi

search_hidden=false
# Check for presence of file name argument.
if [ -z "$1" ]; then
    echo "ERROR: specify a file name."
    print_usage
    return 1
elif [ -n "$2" ]; then
    if [ -z "$3" ]; then
        if [ "$1" = "-H" ]; then
            search_hidden=true
            shift
        else
            echo "ERROR: invalid arguments"
            print_usage
            return 1
        fi
    else
        echo "ERROR: too many arguments."
        print_usage
        return 1
    fi
fi

# Search for the file.
if [ "$search_hidden" = "true" ]; then
   the_fname=$(fd -H -g "$1")
else
    the_fname=$(fd -g "$1")
fi
unset search_hidden
file_count=$(printf "%s" "$the_fname" | grep -c . )

# Report error if more than 1 location found.
if [ "${file_count}" -gt  1 ]; then
    echo "CAUTION: found ${file_count} files in directory tree for: $1"
    echo "The files are:"
    fd -g "$1" | nl
    if [[ -n "$EDITOR" ]]; then
        prompt_yn "Edit these files with '$EDITOR'"
        if [ "$prompt_yn_return" = "y" ]; then
            case $EDITOR in
                cd* | rm* | sudo* | disk* )
                    printf "WARNING!! Unsafe EDITOR: '%s'\n" "$EDITOR"
                    printf "WARNING!! Files are not edited! Change value of EDITOR\n"
                    ;;

                *)
                    the_fnames=$(printf "%s" "$the_fname" | tr '\n' ' ')
                    case $usrhome__running_shell in
                        "zsh")
                            read -A the_fnames_arr <<< "$the_fnames"
                            eval $EDITOR $the_fnames_arr
                            unset the_fnames_arr
                            ;;
                        "bash")
                            IFS=' '  read -a the_fnames_arr <<< "$the_fnames"
                            eval $EDITOR "${the_fnames_arr[@]}"
                            unset the_fnames_arr
                            ;;
                        *)
                            echo "Editing files not supported under '$usrhome__running_shell' shell."
                            ;;
                    esac
                    unset the_fnames
                    unset usrhome__running_shell
                    ;;
            esac
        fi
    fi
    return ${file_count}
fi

# Otherwise extract the directory name.
unset file_count
the_fpath=$(dirname "${the_fname}")
unset the_fname

if [ "$the_fpath" = "." ]; then
    echo "Error: Not found inside any sub-directory: $1"
    return 1
fi

# And jump to it.
cd "${the_fpath}" || return 1
unset the_fpath

# ----------------------------------------------------------------------------
