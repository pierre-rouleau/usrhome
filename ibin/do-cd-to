# Sourced script: do-cd-to  -*- mode: sh; -*-
#
# Purpose   : Search for file in directory tree, if founcd ccd to its directory.
# Created   : Thursday, March 27 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-07-12 17:14:13 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# Searches for a file inside the current directory tree.
#
# If ONE file is found, changes the current directory to the directory that
# holds that file.
#
# If it finds SEVERAL files:
# - Print a cautionary note, listing the count and the files found.
# - If the EDITOR environment variable is set, prompt the user for editing the
#   files. If the user accepts open the editor on the found files.
#
# EXIT CODE:
#  - 0: ONE file found, or selected out of many and cd done.
#  - 1: NO file found
#  - n: number of file found and edited.

# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# - fd : see https://github.com/sharkdp/fd "
#   - To install fd:
#      - On macOS:  brew install fd
#

# ----------------------------------------------------------------------------
# Code
# ----
#
#

# Set USRHOME_SHELL to zsh, bash, ... or unknown
. "$USRHOME_DIR/ibin/which-shell"


prompt_yn_return=
prompt_yn()
{
    # Arg 1: string prompt
    while true; do
        printf "%s [yn]? " "$1"
        read -r yn
        case $yn in
            [Yy]* )
                prompt_yn_return=y
                break
                ;;
            [Nn]* )
                prompt_yn_return=n
                break
                ;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

is_integer_return=
entered_integer=
is_integer()
{
    # Arg 1: entered string.
    is_integer_return=
    entered_integer=
    if [ -n "$1" ]; then
        case "$1" in
            -*)
                # unexpected option?
                is_integer_return=n
                ;;

            (*[!0123456789]*)
                # anything before or after a ASCII digit is not allowed
                is_integer_return=n
                ;;

            *)
                # only numbers are allowed.
                # shellcheck disable=SC2003 # $(()) consider leading zeroes as octal
                entered_integer=$( expr "$1" + 0)
                is_integer_return=y
                ;;
        esac
    fi
}


prompt_number_return=
prompt_number()
{
    # Arg 1: arg_prompt string
    # Arg 2: maximum allowed integer.

    arg_prompt="$1"
    arg_max_int="$2"
    while true; do
        printf -- "\n%s: " "$arg_prompt"
        is_integer_return=
        read -r user_input
        is_integer "$user_input"
        if [ "$is_integer_return" = "y" ]; then
            if [ "$entered_integer" -gt "$arg_max_int" ]; then
                printf -- "Entered value, %s, is out of range\n" "$user_input"
            elif [ 0 -ge "$entered_integer" ]; then
                printf -- "Entered value, %s, is out of range\n" "$user_input"
            else
                prompt_number_return="$entered_integer"
                printf -- "Value selected: %s\n" "$prompt_number_return"
                break
            fi
        else
            printf -- "Entered value, %s, is not a valid positive integer\n" "$user_input"
        fi
    done
}


print_usage()
{
    printf "\
cd-to : Search for file in current directory tree.
        If ONE is found: change current directory to its parent.
        If more than 1 file found, list them and offer to edit them.

   Usage:  cd-to [-h|--help]
           cd-to    [-H] [-I] [-e] FILENAME
           cd-to -d [-H] [-I] [-e] DIRNAME

     By default:

     - skips searching hidden directories unless the -H option is
       specified.
     - skips searching ignored directories unless the -I option is
       specified.
     - -e: edit file(s).  If several file/directories are found
                          it ignores that option and prompts
                          for editing the files anyway.

     FILENAME or DIRNAME may use the glob syntax supported by fd.

     EXIT CODE:
      - 0: ONE file found, or selected out of many and cd done.
      - 1: NO file found.
      - n: number of file found and edited.

    File editing is not an option when the script is running inside
    an Emacs shell.

    Limitation: does not support file or directory name that starts with -
"
}

# Check for availability of the fd command.
if ! command -v fd > /dev/null 2>&1; then
    echo "ERROR: the fd command is not available!"
    echo "  See: https://github.com/sharkdp/fd "
    echo "  Install it with your package manager."
    return 1
fi


# Set option default values, can be modified by check_option()
search_hidden=false
search_ignored=false
search_for=files
search_for1=file
edit_files=false
unset cd_to__exit_code

check_option()
{
    # Arg1: option
    case "$1" in
        "-h" | "--help" )
            print_usage
            cd_to__exit_code=0
            ;;

        "-H")
            search_hidden=true
            ;;

        "-I")
            search_ignored=true
            ;;

        "-d")
            search_for1=directory
            search_for=directories
            ;;

        "-e")
            edit_files=true
            ;;

        -?*)
            echo "ERROR: unsupported option: $1"
            print_usage
            cd_to__exit_code=1
    esac
}

# Validate input
case "$#" in
    0)
        echo "ERROR: specify a file name."
        print_usage
        return 1
        ;;

    1)
        check_option "$1"
        if [ -n "$cd_to__exit_code" ]; then

            return "$cd_to__exit_code"
        fi
        the_fname="$1"
        ;;

    2)
        check_option "$1"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        the_fname="$2"
        ;;
    3)
        check_option "$1"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        check_option "$2"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        the_fname="$3"
        ;;

    4)
        check_option "$1"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        check_option "$2"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        check_option "$3"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        the_fname="$4"
        ;;

    5)
        check_option "$1"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        check_option "$2"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        check_option "$3"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        check_option "$4"
        if [ -n "$cd_to__exit_code" ]; then
            return "$cd_to__exit_code"
        fi
        the_fname="$5"
        ;;


    *)
        echo "ERROR: too many arguments ($#)."
        print_usage
        return 1
esac

# echo "PROCEEDING: the_fname=$the_fname, search_hidden=$search_hidden, search_for=$search_for"

if [ "${search_hidden}" = "true" ]; then
    if [ "$search_for" = "directories" ]; then
        if [ "$search_ignored" = "true" ]; then
            the_filepath="$(fd -H -I --type d -g $the_fname)"
        else
            the_filepath="$(fd -H --type d -g $the_fname)"
        fi
    else
        if [ "$search_ignored" = "true" ]; then
            the_filepath="$(fd -H -I --type f -g $the_fname)"
        else
            the_filepath="$(fd -H --type f -g $the_fname)"
        fi
    fi
else
    if [ "$search_for" = "directories" ]; then
        if [ "$search_ignored" = "true" ]; then
            the_filepath="$(fd -I --type=d -g $the_fname)"
        else
            the_filepath="$(fd --type=d -g $the_fname)"
        fi
    else
        if [ "$search_ignored" = "true" ]; then
            the_filepath="$(fd -I --type=f -g $the_fname)"
        else
            the_filepath="$(fd --type=f -g $the_fname)"
        fi
    fi
fi

# Use grep -c to count number of lines on stdout.  Accept anything.
file_count=$(printf "%s" "$the_filepath" | grep -c . )


# Report error if more than 1 location found.
if [ "${file_count}" -gt  1 ]; then
    echo "CAUTION: found ${file_count} ${search_for} in directory tree for: $1"
    echo "The ${search_for} are:"
    printf "%s\n" "$the_filepath" | nl
    if [ -n "$EDITOR" ] && [ -z "$INSIDE_EMACS" ]; then
        printf "\n"
        prompt_yn "Edit these ${search_for} with '$EDITOR'"
        if [ "$prompt_yn_return" = "y" ]; then
            case $EDITOR in
                cd* | rm* | sudo* | disk* )
                    printf "WARNING!! Unsafe EDITOR: '%s'\n" "$EDITOR"
                    printf "WARNING!! Files are not edited! Change value of EDITOR\n"
                    ;;

                *)
                    the_fnames=$(printf "%s" "$the_filepath" | tr '\n' ' ')
                    case $USRHOME_SHELL in
                        "zsh")
                            # The next line is OK in zsh!  Ignore the shellcheck error.
                            #  or find a way to tell shellcheck that the next line is used
                            #  when zsh is running this script.
                            read -A the_fnames_arr <<< "$the_fnames"
                            eval $EDITOR $the_fnames_arr
                            unset the_fnames_arr
                            ;;
                        "bash")
                            IFS=' '  read -a the_fnames_arr <<< "$the_fnames"
                            eval $EDITOR "${the_fnames_arr[@]}"
                            unset the_fnames_arr
                            ;;
                        *)
                            echo "Editing files not supported under '$USRHOME_SHELL' shell."
                            ;;
                    esac
                    unset the_fnames
                    ;;
            esac
            # Edited the files, return with 0.
            return 0
        fi
    fi
    # User wants or can't use the editor:  cd to one of the files;
    # prompt user to identify the file.
    # and update the_filepath with that single file name.
    prompt_number_return=
    prompt_number "Select the file cd to" "$file_count"
    fileno_filename="$(echo "${the_filepath}" | head -${prompt_number_return} | tail -1)"
    printf -- "You selected #%s: %s\n" "$prompt_number_return" "${fileno_filename}"
    the_filepath=${fileno_filename}
fi

# Otherwise extract the directory name.
unset file_count
the_dirpath=$(dirname "${the_filepath}")
unset the_filepath

if [ "$the_dirpath" = "." ]; then
    echo "Error: No ${search_for1} found inside any sub-directory with the name: $the_fname"
    unset search_for
    unset search_for1
    return 1
fi

unset search_for
unset search_for1

# And jump to it.
cd "${the_dirpath}" || return 1
unset the_dirpath
ls -l "${the_fname}"
if [ "$edit_files" = "true" ]; then
    echo "$EDITOR ${the_fname}"
    eval $EDITOR "${the_fname}"
fi
unset the_fname

# ----------------------------------------------------------------------------
#  Local Variables:
#  sh-shell: sh
#  End:
