# Sourced script: setfor-alias  -*- mode: sh; -*-
#
# Purpose   : Set USRHOME command aliases common to bash and zsh shells.
# Created   : Friday, April 12 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-05-05 16:39:27 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# This file contains command alias definitions that are available for USRHOME
# users of Bash and Z shell.
#

# ----------------------------------------------------------------------------
# Code
# ----
#
#

usrhome_trace_in "\$USRHOME_DIR/ibin/setfor-alias"
# --------

# Set USRHOME_SHELL to zsh, bash, ... or unknown
. "$USRHOME_DIR/ibin/which-shell"

# Topic: Alias: showpath
# ----------------------
#
# Note: USRHOME implements showpath as a script stored inside
#      the $USRHOME/bin directory.  That's perfect for all shells
#      that have an expanded PATH, but not for login shells when
#      the user elected to leave USRHOME_CONFIG_AT_LOGIN undefined
#      because they explicitly do not want PATH to be modified in
#      login shells.  But showpath is very useful in those shells too.
#      A alias is defined here to allow the command in these login shells as well.
#
alias showpath='$USRHOME_DIR/bin/showpath'

# Topic: Alias: usrhome-env
# -------------------------
#
# This is the same as showpath, but for usrhome-env.
alias usrhome-env='$USRHOME_DIR/bin/usrhome-env'

# No other aliases for USRHOME/bin files as these other commands
# are not only showing values.


# Topic: Info: Shell
# ------------------

# shellcheck disable=SC2142 # inside a function $0 refers to the function name.  Can't use that.
alias info-shell='printf "\$0 : %s, \$SHELL : %s\n" $0 $SHELL'
alias \?='printf "%s\n" $?'


info-shell-special-var()
{
    positionals=""
    sep=""
    pos=1
    all_words=""
    for word in "$@"; do
        all_words="${all_words}${sep}\"${word}\""
        positionals="${positionals}${sep}\$${pos}='${word}'"
        sep=", "
        pos=$(( pos + 1))
    done
    #all_words="$(echo "$all_words" | sed -e 's/[[:space:]]*$//')"

    case "$USRHOME_SHELL" in
        bash | zsh)
            # Note: printf arguments MUST math number of formatting meta-characters
            #       otherwise multiple printf executions is done to consume all arguments!
            # This precludes pass in $@ to printf, so it was processed into the all_words variable.
            printf -- "\
The following shows the shell special shell parameters
along with their values (except for positional parameters)
shown within single quotes.
 - \$#: Number of positional arguments.
 ----> '$#'

 - \$â„–: Positional parameter # value: \$1 is the first parameter.
 ----> %s

 - \$*: In double quote: expand all positional parameters, they are all inside 1 word, each separated by \$IFS.
 ----> '\"%s\"'

 - \$@: In double quote: expand all positional parameters, each one inside it's own argument word.
 ----> '%s'

 - \$0: Name of the shell or shell script.
 ----> '$0'

 - \$?: Exit status of last executed command
 ----> '$?'

 - \$_: Last argument of previous command
 ----> '$_'

 - \$-: The current set of options
 ----> '$-'

 - \$!: Process ID of job most recently placed in foreground.
 ----> '$!'

 - \$\$: Process ID of the shell.
 ----> '$$'\n" "$positionals" "$*" "$all_words"
            ;;

        *)
            printf "The %s shell is not supported yet.\n" "$USRHOME_SHELL"
            ;;
    esac
    echo "-----------------------------------"
}



# Topic: Alias: Clear Screen
# --------------------------
# Useful commands
alias cls='clear'

# Topic: Alias: Create/Delete Directory
# -------------------------------------
mdd()
{
    # mdd: mkdir and cd
    #      If path has / in it, mkdir -p is used.
    if printf "%s" "$1" | grep "/" > /dev/null; then
        mkdir -pv "$1" || return 1
    else
        mkdir "$1" || return 1
    fi
    cd "$1" || return 1
}

alias md='mkdir'
alias rd='rmdir'

# Topic: Alias: Python
# --------------------
alias p3='python3'

# Topic: Alias: USRHOME Control
# -----------------------------
# Source environment control scripts
alias usrhome-prompt-toggle-usr-host='source $USRHOME_DIR/ibin/setfor-prompt-toggle-usr-host'
alias usrhome-shell-toggle-tracing='source $USRHOME_DIR/ibin/setfor-shell-toggle-tracing'
alias usrhome-prompt-model-to='source $USRHOME_DIR/ibin/setfor-prompt-model-to'

# Topic: Alias: ls commands
# -------------------------
# ls flags:
# -a : include all files, including 'hidden' files
# -d : directories listed as plain files (instead of recursing into them)
# -F : display '/' after dirname,
#              '*' after executable,
#              '@' for symlink,
#              '=' after socket,
#              '%' after whiteout,
#              '|' after FIFO
# -G : macOS: colorize    , Linux:= no-group: don't list group
# -O : include file macOS flags
#

case $(uname) in
    'Darwin' )
        # Supports the -O option:
        # -G on macOS means colorize.
        alias l='ls -FG'
        alias la='ls -aFG'
        alias ll='ls -lFGO'
        alias lla='ls -alFGO'
        alias lt='ls -ltrFGO'
        alias lta='ls -ltraFGO'
        ;;

    *)
        # There's no support for the -O option normally.
        # -G normally means to not display group info in long display (so we don't use this here)
        # --color=auto activates colors
        alias l='ls -F --color=auto'
        alias la='ls -aF --color=auto'
        alias ll='ls -lF --color=auto'
        alias lla='ls -alF --color=auto'
        alias lt='ls -ltrF --color=auto'
        alias lta='ls -ltraF --color=auto'
        ;;
esac


set_ls_options()
{
    case $(uname) in
        'Darwin' )
            # Supports the -O option: extra macOS flags.
            # -G on macOS means colorize.
            usrhome_ls_option_flag=-O
            usrhome_ls_color_flag=-G
            ;;
        *)
            # There's no support for the -O option normally.
            # -G normally means to not display group info in long display (so we don't use this here)
            # --color=auto activates colors
            usrhome_ls_option_flag=
            usrhome_ls_color_flag="--color=auto"
            ;;
    esac
}

# List directories
lsd()
{
    set_ls_options
    if [[ -z $1 ]]; then
        ls -d ${usrhome_ls_color_flag} */
    elif [[ $# > 1 ]]; then
        echo "ERROR: lsd does not support glob, and more than 1 argument."
        echo "  You provided $# argument."
        echo " Usage: lsd [ARG]"
        echo "  ARG: full or partial directory name."
        return 1
    else
        ls -d ${usrhome_ls_color_flag} $1*/
    fi
}

lsda()
{
    set_ls_options
    if [[ -z $1 ]]; then
        ls -d ${usrhome_ls_color_flag} */ .[^.]*/
    elif [[ $# > 1 ]]; then
        echo "ERROR: lsd does not support glob, and more than 1 argument."
        echo "  You provided $# argument"
        echo " Usage: lsda [ARG]"
        echo "  ARG: full or partial directory name."
        return 1
    else
        if $((echo $1*/  >&2) >/dev/null 2>&1 ); then
            has_reg=1
        else
            has_reg=0
        fi
        if $((echo .$1*/ >&2) >/dev/null 2>&1 ); then
            has_hid=1
        else
            has_hid=0
        fi
        # echo "has_reg: $has_reg, has_hid=$has_hid"
        if [[ "$has_reg" = "1" ]]; then
            if [[ "$has_hid" = "1" ]]; then
                # has hidden and regular
                ls -d ${usrhome_ls_color_flag} {.$1*/,$1*/}
            else
                # has regular only
                ls -d ${usrhome_ls_color_flag} $1*/
            fi
        else
            if [[ "$has_hid" = "1" ]]; then
                # has hidden only
                ls -d ${usrhome_ls_color_flag} .$1*/
            else
                # has nothing
                return 1
            fi
        fi
    fi
}

# lsl: list symlinks
lsl()
{
    case "$1" in
        "-l")
            long_ls="true"
            shift
            ;;

        --help | -h)
            echo "lsl : list symbolic links in current directory"
            echo " Usage: lsl [-l] ['NAME']"
            echo "   -l : list symlinks using the ls -l format."
            echo "  NAME: glob identifying the names to list."
            echo "        It *must* be enclosed with single quotes."
            return 0
            ;;
        # prevent any other option:
        # note that it also precludes having symlink names that start with a '-'
        -?* )
            echo "ERROR: lsl does not support the $1 option."
            return 1
            ;;
        #
        *)
            long_ls="false"
            ;;
    esac
    if [[ -z "$1" ]]; then
        if [[ "$long_ls" = "true" ]]; then
            find . -maxdepth 1 -type l | xargs -I % ls -l %
        else
            find . -maxdepth 1 -type l | sed -e 's|\./||g' | sort | column
        fi
    elif [[ "$#" > 1 ]]; then
        echo "ERROR: lsl does not support glob argument; it must be single quoted."
        echo "  You provided $# arguments (the shell expands your glob)."
        echo " Usage: lsl [-l] [NAME]"
        echo "  -l : lst symlinks using ls -l format."
        echo "  NAME: single quoted glob expression."
        echo " Example to list all symlink that start with .bas: : lsl '.bas*' "
        return 1
    else
        if [[ "$long_ls" = "true" ]]; then
            find . -maxdepth 1 -name "$1" -type l | xargs -I % ls -l %
        else
            find . -maxdepth 1 -name "$1" -type l | sed -e 's|\./||g' | sort | column
        fi
    fi
}

# ----------------------------------------------------------------------------
# Topic: Info: macOS Rosetta2
# ---------------------------

if [ "$(uname)" = "Darwin" ]; then
    info-rosetta2()
    {
        printf "Rosetta 2 is %sinstalled.\n" $(/usr/bin/pgrep -q oahd && echo "" || echo "not ")
        printf " More info is available at:\n"
        printf "  https://eclecticlight.co/2021/01/22/running-intel-code-on-your-m1-mac-rosetta-2-and-oah/\n"
    }
fi

# ----------------------------------------------------------------------------
# Topic: Alias: Environment Variables
# -----------------------------------
# Manual environment variable manipulation
alias setenv='source $USRHOME_DIR/ibin/do-setenv'
alias clrenv='source $USRHOME_DIR/ibin/do-clrenv'
alias sanitize-path='source $USRHOME_DIR/ibin/do-sanitize-path.zsh'


# ----------------------------------------------------------------------------
# Topic: Alias: Change Current Directory
# --------------------------------------

# File searching and navigation
alias cd-to='source $USRHOME_DIR/ibin/do-cd-to'

# Programming Environment Setup
# These commands source scripts that setup the environment.
# Some of them set the terminal's title (using set-title)
alias pel='source $USRHOME_DIR/ibin/envfor-pel'
alias usrhome='source $USRHOME_DIR/ibin/do-usrhome'
alias usrcfg='source $USRHOME_DIR/ibin/do-usrcfg'

# Set shortcut functions for Bash and the Z shell
# -----------------------------------------------

usrhome_cd()
{
    if [ -n "$2" ]; then
        if [[ -d "$2/$3" ]]; then
            cd "$2/$3" || return 1
        else
            printf "****ERROR: %s is not a directory!\n" "$2/$3"
        fi
    else
        echo "****ERROR: $1 is not defined!"
    fi
}


if [ "$(uname)" = "Darwin" ]; then
    cdv()
    {
        cd "/Volumes/$1" || return 1
    }
fi


cdh()
{
    usrhome_cd "USRHOME_DIR_MY" "$USRHOME_DIR_MY" "$1"
}

cdlic()
{
    usrhome_cd "USRHOME_DIR_LIC" "$USRHOME_DIR_LIC" "$1"
}

cdlog()
{
    usrhome_cd "USRHOME_DIR_LOG" "$USRHOME_DIR_LOG" "$1"
}


cddv()
{
    usrhome_cd "USRHOME_DIR_DV" "$USRHOME_DIR_DV" "$1"
}

cdpriv()
{
    usrhome_cd "USRHOME_DIR_PRIV" "$USRHOME_DIR_PRIV" "$1"
}

cdpub()
{
    usrhome_cd "USRHOME_DIR_PUB" "$USRHOME_DIR_PUB" "$1"
}

cdtmp()
{
    usrhome_cd "USRHOME_DIR_TMP" "$USRHOME_DIR_TMP" "$1"
}

cd..()
{
    cd "../$1"  || return 1
}

cd...()
{
    cd "../../$1" || return 1
}

cd....()
{
    cd "../../../$1" || return 1
}

alias ..='cd..'
alias ...='cd...'
alias ....='cd....'

# ----------------------------------------------------------------------------
# Topic: Info: Prompt
# -------------------
case $USRHOME_SHELL in
    bash)
        info-prompt()
        {
            if [ "$1" = "-q" ]; then
                printf "Bash prompt model variables:
- USRHOME_PROMPT_MODEL         : %s
- USRHOME_PROMPT_MODEL_OVERRIDE: %s
" "$USRHOME_PROMPT_MODEL" "$USRHOME_PROMPT_MODEL_OVERRIDE"
            else
                printf "Bash prompt control variables:
$(tput bold)- PS0:$(tput sgr0) %s
$(tput bold)- PS1:$(tput sgr0) %s
$(tput bold)- PS2:$(tput sgr0) %s
$(tput bold)- PS3:$(tput sgr0) %s
$(tput bold)- PS4:$(tput sgr0) %s
$(tput bold)- USRHOME_PROMPT_MODEL:$(tput sgr0) %s
$(tput bold)- USRHOME_PROMPT_MODEL_OVERRIDE:$(tput sgr0) %s

See: https://wiki.archlinux.org/title/Bash/Prompt_customization#Bash_escape_sequences
" "$PS0" "$PS1" "$PS2" "$PS3" "$PS4" "$USRHOME_PROMPT_MODEL" "$USRHOME_PROMPT_MODEL_OVERRIDE"
            fi
        }
        ;;

    zsh)
        info-prompt()
        {
            if [ "$1" = "-q" ]; then
                printf "Bash prompt model variables:
- USRHOME_PROMPT_MODEL         : %s
- USRHOME_PROMPT_MODEL_OVERRIDE: %s
" "$USRHOME_PROMPT_MODEL" "$USRHOME_PROMPT_MODEL_OVERRIDE"
            else
                # shellcheck disable=SC2154
                printf "Z shell prompt control variables:
- PROMPT0: %s
- PROMPT1: %s
- PROMPT2: %s
- PROMPT3: %s
- PROMPT4: %s
- RPROMPT: %s
- SPROMPT: %s
- PROMPT : %s
  - p1   : %s
  - p2   : %s
  - p3   : %s
- USRHOME_PROMPT_MODEL: %s
- USRHOME_PROMPT_MODEL_OVERRIDE: %s\n" "$PROMPT0" "$PROMPT1" "$PROMPT2" "$PROMPT3" "$PROMPT4" "$RPROMPT" "$SPROMPT" "$PROMPT" "$p1" "$p2" "$p3" "$USRHOME_PROMPT_MODEL" "$USRHOME_PROMPT_MODEL_OVERRIDE"
            fi
        }
        ;;
    *)
        ;;
esac

# ----------------------------------------------------------------------------
# Topic: Info: Terminal Type
# --------------------------
#
# Environment variables:
# Gnome: DESKTOP_SESSION
# XCFE: XDG_CURRENT_DESKTOP=XFCE
# KDE:  XDG_CURRENT_DESKTOP=KDE
info-desktop()
{
    if test -n "$USRHOME_DESKTOP"; then
        USRHOME_DESKTOP=
    fi
    case $(uname) in
        'Darwin' )
            USRHOME_DESKTOP="macOS"
            printf "macOS\n"
            ;;

        *)
            # Assume Unix/Linux OS
            if test -n "$XDG_CURRENT_DESKTOP"; then
                case "$XDG_CURRENT_DESKTOP" in
                    "XFCE" | "xfce")
                        USRHOME_DESKTOP="xfce"
                        printf "XFCE\n"
                        ;;
                    "GNOME" | "gnome")
                        USRHOME_DESKTOP="gnome"
                        printf "gnome\n"
                        ;;
                    "KDE" |"kde")
                        USRHOME_DESKTOP="kde"
                        printf "kde\n"
                esac
            elif test -n "$DESKTOP_SESSION"; then
                USRHOME_DESKTOP="gnome"
                printf "%s\n" "$DESKTOP_SESSION"
            fi
            ;;
    esac
    if test -z "$USRHOME_DESKTOP"; then
        printf "Desktop unknown - please update info-desktop()
inside: %s/ibin/setfor-alias
" "$USRHOME_DIR"
    fi
}

# ----------------------------------------------------------------------------
# Topic: Alias: Environment Setup Control
# ---------------------------------------
alias use-usrhome='source $USRHOME_DIR/ibin/envfor-usrhome'
alias use-homebrew='source $USRHOME_DIR/ibin/envfor-homebrew'
alias use-cbr='source $USRHOME_DIR/ibin/envfor-cbr'
alias use-emacs-for-man='source $USRHOME_DIR/ibin/envfor-emacs-for-man'
alias use-diff='source $USRHOME_DIR/ibin/envfor-diff'
# ----------------------------------------------------------------------------
# Cleanup
usrhome_trace_out
# ----------------------------------------------------------------------------
