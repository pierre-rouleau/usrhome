# Sourced script: setfor-alias  -*- mode: sh; -*-
#
# Purpose   : Set USRHOME command aliases common to bash and zsh shells.
# Created   : Friday, April 12 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-04-29 09:18:41 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# This file contains command alias definitions that are available for USRHOME
# users of Bash and Z shell.
#

# ----------------------------------------------------------------------------
# Code
# ----
#
#

usrhome_trace_in "\$USRHOME_DIR/ibin/setfor-alias"
# --------

# Identify what (Bourne compatible) shell this  is running.
# Store result in $USRHOME_SHELL so further code can depend
# on the shell type.  Credit: https://unix.stackexchange.com/a/72475/473577
# Not yet exported.

if test -n "$ZSH_VERSION"; then
  USRHOME_SHELL=zsh
elif test -n "$BASH_VERSION"; then
  USRHOME_SHELL=bash
elif test -n "$KSH_VERSION"; then
  USRHOME_SHELL=ksh
elif test -n "$FCEDIT"; then
  USRHOME_SHELL=ksh
elif test -n "$PS3"; then
  USRHOME_SHELL=unknown
else
  USRHOME_SHELL=sh
fi



alias ss='printf "\$0 : %s, \$SHELL : %s\n" $0 $SHELL'
alias \?='printf "%s\n" $?'


# Useful commands
alias cls='clear'
alias md='mkdir'
alias rd='rmdir'

# Python specific
alias p3='python3'

# Source environment control scripts
alias usrhome-prompt-toggle-usr-host='source $USRHOME_DIR/ibin/setfor-prompt-toggle-usr-host'
alias usrhome-shell-toggle-tracing='source $USRHOME_DIR/ibin/setfor-shell-toggle-tracing'
alias usrhome-prompt-model-to='source $USRHOME_DIR/ibin/setfor-prompt-model-to'


# ls flags:
# -a : include all files, including 'hidden' files
# -d : directories listed as plain files (instead of recursing into them)
# -F : display '/' after dirname,
#              '*' after executable,
#              '@' for symlink,
#              '=' after socket,
#              '%' after whiteout,
#              '|' after FIFO
# -G : macOS: colorize    , Linux:= no-group: don't list group
# -O : include file macOS flags
#


case $(uname) in
    'Darwin' )
        # Supports the -O option:
        # -G on macOS means colorize.
        alias l='ls -FG'
        alias la='ls -aFG'
        alias ll='ls -lFGO'
        alias lla='ls -alFGO'
        alias lt='ls -ltrFGO'
        alias lta='ls -ltraFGO'
        ;;

    *)
        # There's no support for the -O option normally.
        # -G normally means to not display group info in long display (so we don't use this here)
        # --color=auto activates colors
        alias l='ls -F --color=auto'
        alias la='ls -aF --color=auto'
        alias ll='ls -lF --color=auto'
        alias lla='ls -alF --color=auto'
        alias lt='ls -ltrF --color=auto'
        alias lta='ls -ltraF --color=auto'
        ;;
esac


# Manual environment variable manipulation
alias setenv='source $USRHOME_DIR/ibin/do-setenv'
alias clrenv='source $USRHOME_DIR/ibin/do-clrenv'
alias sanitize-path='source $USRHOME_DIR/ibin/do-sanitize-path.zsh'

# File searching and navigation
alias cd-to='source $USRHOME_DIR/ibin/do-cd-to'

# Programming Environment Setup
# These commands source scripts that setup the environment.
# Some of them set the terminal's title (using set-title)
alias pel='source $USRHOME_DIR/ibin/envfor-pel'
alias usrhome='source $USRHOME_DIR/ibin/do-usrhome'
alias usrcfg='source $USRHOME_DIR/ibin/do-usrcfg'
alias use-usrhome='source $USRHOME_DIR/ibin/envfor-usrhome'
alias use-homebrew='source $USRHOME_DIR/ibin/envfor-homebrew'


# -------
alias use-cbr='source $USRHOME_DIR/ibin/envfor-cbr'
alias use-emacs-for-man='source $USRHOME_DIR/ibin/envfor-emacs-for-man'

# ----------------------------------------------------------------------------
# Set shortcut functions for Bash and the Z shell
# -----------------------------------------------
# These functions

usrhome_cd()
{
    if [ -n "$2" ]; then
        if [[ -d "$2/$3" ]]; then
            cd "$2/$3" || return 1
        else
            printf "****ERROR: %s is not a directory!\n" "$2/$3"
        fi
    else
        echo "****ERROR: $1 is not defined!"
    fi
}


if [ "$(uname)" = "Darwin" ]; then
    cdv()
    {
        cd "/Volumes/$1"
    }
fi


cdh()
{
    usrhome_cd "USRHOME_DIR_MY" "$USRHOME_DIR_MY" "$1"
}

cdlic()
{
    usrhome_cd "USRHOME_DIR_LIC" "$USRHOME_DIR_LIC" "$1"
}

cdlog()
{
    usrhome_cd "USRHOME_DIR_LOG" "$USRHOME_DIR_LOG" "$1"
}


cddv()
{
    usrhome_cd "USRHOME_DIR_DV" "$USRHOME_DIR_DV" "$1"
}

cdpriv()
{
    usrhome_cd "USRHOME_DIR_PRIV" "$USRHOME_DIR_PRIV" "$1"
}

cdpub()
{
    usrhome_cd "USRHOME_DIR_PUB" "$USRHOME_DIR_PUB" "$1"
}

cdtmp()
{
    usrhome_cd "USRHOME_DIR_TMP" "$USRHOME_DIR_TMP" "$1"
}

cd..()
{
    cd "../$1"
}

cd...()
{
    cd "../../$1"
}

cd....()
{
    cd "../../../$1"
}


alias ..='cd..'
alias ...='cd...'
alias ....='cd....'

mdd()
{
    # mdd: mkdir and cd
    #      If path has / in it, mkdir -p is used.
    if printf "%s" "$1" | grep "/" > /dev/null; then
        mkdir -pv "$1" || return 1
    else
        mkdir "$1" || return 1
    fi
    cd "$1"
}


# Topic: Prompt Control : Info
# ----------------------------
case $USRHOME_SHELL in
    bash)
        info-prompt()
        {
            printf "Bash prompt control variables:
$(tput bold)- PS0:$(tput sgr0) %s
$(tput bold)- PS1:$(tput sgr0) %s
$(tput bold)- PS2:$(tput sgr0) %s
$(tput bold)- PS3:$(tput sgr0) %s
$(tput bold)- PS4:$(tput sgr0) %s
" "$PS0" "$PS1" "$PS2" "$PS3" "$PS4"
        }
        ;;

    zsh)
        info-prompt()
        {
            printf "Z shell prompt control variables:
- PROMPT0: %s
- PROMPT1: %s
- PROMPT2: %s
- PROMPT3: %s
- PROMPT4: %s
- RPROMPT: %s
- SPROMPT: %s
- PROMPT : %s
  - p1   : %s
  - p2   : %s
" "$PROMPT0" "$PROMPT1" "$PROMPT2" "$PROMPT3" "$PROMPT4" "$RPROMPT" "$SPROMPT" "$PROMPT" "$p1" "$p2"
        }
        ;;
    *)
        ;;

esac

# ----------------------------------------------------------------------------
# Cleanup
usrhome_trace_out
# ----------------------------------------------------------------------------
