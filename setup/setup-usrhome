#!/bin/sh
# SH FILE: setup-usrhome
#
# Purpose   : Setup usrhome personnal/private persistent files.
# Created   : Thursday, March 28 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-06-25 19:13:04 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# USRHOME Initial configuration: creates the initial personnal/private
# persistent configuration script file inside the usrcfg directory placed in
# the same directory already holding usrhome.  Then create the user's Z Shell
# configuration file symlinks pointing to the ones provided by USRHOME.  If
# there was any pre-existing regular files, they are renamed to regular
# (non-hidden) backup files.
#
# All executed commands are printed on stdout.
#
# Before proceeding, the script prints a description of what would be done
# and prompts to proceed.
#
# EXIT CODE:
#  - 0 on success
#  - 1 on command error
#  - 2 on user request to exit

# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# - POSIX commands.

# ----------------------------------------------------------------------------
# Code
# ----
#
#
# Checking or setting USRHOME_DIR environment variable
# ----------------------------------------------------
if [ -z "$USRHOME_DIR" ]; then
    USRHOME_DIR=$(pwd -P)
    if [ "$(basename "$USRHOME_DIR")" != "usrhome" ]; then
        echo "The directory where USRHOME is installed must be identified"
        echo "by the USRHOME_DIR environment variable."
        echo "The directory name should be 'usrhome'"
        echo "It's currently not the case; it is: $(basename "$USRHOME_DIR")"
        echo "Please rename the directory to usrhome and try again."
        exit 1
    fi
fi



# Utility Functions
# -----------------

# Global script variable: used as output from prompt().
proceed=1

prompt()
{
    # Arg 1: string: prompt
    # Arg 2: optional string. When empty/unused, the function exits when the user
    #                         answer is NO and exits normally when the user
    #                         types YES.
    #                         When non-empty, prompt does not exit when user
    #                         answer NO and the caller must check the returned
    #                         value stored in the proceed variable:
    #                         set to 1 on yes, 0 on no.
    while true; do
        printf "%s [yn]? " "$1"
        read -r yn
        case $yn in
            [Yy]* )
                proceed=1
                break
                ;;
            [Nn]* )
                proceed=0
                if [ -z "$2" ]; then
                    echo "Exiting..."
                    exit 2
                else
                    break
                fi
                ;;
            * ) echo "Please answer yes or no.";;
        esac
    done
    # dummy code to prevent invalid shellcheck warning
    echo "proceed: $proceed" > /dev/null
}


exit_on_error()
{
    # Arg 1: string: error message
    printf "ERROR: %s\nExiting..." "$1"
    exit 1
}


create_dot_file()
{
    # Arg 1: string: base name of config file (without the leading period)
    # Arg 2: string: complete path to USRHOME dot config file to use

    echo "  ln -sf $2 $HOME/.$1"
    ln -sf "$2" "$HOME/.$1" || exit_on_error "creating symlink for $HOME/.$1"
}

modify_dot_file()
{
    # Arg 1: string: base name of config file (without the leading period)
    # Arg 2: string: extension: "zsh", "bash" or "sh"

    usrhome_src="$(realpath "$USRHOME_DIR/dot/$1.$2")"

    if [ -f "$HOME/.$1" ]; then
        if [ ! -h "$HOME/.$1" ]; then
            # A regular file is being used: back it up.
            echo " - Creating backup for $HOME/.$1:"
            echo "   mv $HOME/.$1 $HOME/backup-$1"
            mv "$HOME/.$1" "$HOME/backup-$1" || exit_on_error "renaming $HOME/.$1"
        fi
    fi

    if [ -h "$HOME/.$1" ]; then
        #  A symlink exists
        old_src="$(realpath "$(readlink "$HOME/.$1")")"
        if [ "$old_src" != "$usrhome_src" ]; then
            echo " - Changing $HOME/.$1 symlink target from: ${old_src}:"
            create_dot_file "$1" "$usrhome_src"
        fi
    else
        # No symlink (either was a regular file or there was none).
        echo " - Creating $HOME/.$1 symlink:"
        create_dot_file "$1" "$usrhome_src"
    fi
}

# ----------------------------------------------------------------------------
# Script Execution
# ----------------

usrhome_path="$(pwd)"
parent_path="$(dirname "$usrhome_path")"
usrcfg_path="$parent_path/usrcfg"
template_path="$usrhome_path/template/usrcfg"

s_usrcfg_path=$(echo "$parent_path/usrcfg" | sed "s:$HOME:~:" )
s_template_path=$(echo "$usrhome_path/template/usrcfg" | sed "s:$HOME:~:" )

# echo "usrcfg_path     := $usrcfg_path"
# echo "s_usrcfg_path   := $s_usrcfg_path"
# echo "template_path   := $template_path"
# echo "s_template_path := $s_template_path"

# --------
# 1: Create usrcfg and store the following files into it:
#
#   - do-user-bashrc.bash
#   - do-user-zprofile.zsh
#   - do-user-zshrc.zsh
#   - setfor-all-config.sh
#

usr_fnames="\
do-user-bash-profile.bash \
do-user-bashrc.bash       \
do-user-zprofile.zsh      \
do-user-zshrc.zsh         \
do-user.sh                \
setfor-all-config.sh"

clear
echo "----- USRHOME Installation:"
echo " It will do this:"
echo ""
if [ !  -d "$usrcfg_path" ]; then
    printf -- " - Create directory %s\n" "${s_usrcfg_path}"
fi
has_backup=no
# shellcheck disable=SC2116
for fn in $(echo "$usr_fnames"); do
    printf -- " - To create %s/%s:\n" "$s_usrcfg_path" "$fn "
    if [ -e  "${usrcfg_path}/${fn}" ]; then
        printf -- "   - Backup %s as   %s\n" "${s_usrcfg_path}/${fn}"  "${s_usrcfg_path}/backup-${fn}"
        has_backup=yes
    fi
    printf -- "   - Create %s from %s\n\n" "${s_usrcfg_path}/${fn}" "${s_template_path}/${fn}"
done
if [ "$has_backup" = "yes" ]; then
    printf -- " YOU will have to edit the backups and the new files\n"
    printf -- " and bring the old logic from the backup into the new\n"
    printf -- " files as required.\n"
fi
echo ""
prompt "Do you wish to proceed"
clear
echo "OK, clearing screen and proceeding..."


# Create usrcfg directory if it does not exists
if [ !  -d "$usrcfg_path" ]; then
    mkdir "${usrcfg_path}" || exit 1
fi

# backup file if needed, create new files from templates
# shellcheck disable=SC2116
for fn in $(echo "$usr_fnames"); do
    if [ -e  "${usrcfg_path}/${fn}" ]; then
        printf -- "mv %s %s\n" "${usrcfg_path}/${fn}"  "${usrcfg_path}/backup-${fn}"
        mv "${usrcfg_path}/${fn}"  "${usrcfg_path}/backup-${fn}"
    fi
    printf -- "cp %s %s\n" "${template_path}/${fn}" "${usrcfg_path}/${fn}"
    cp "${template_path}/${fn}" "${usrcfg_path}/${fn}"
done

if [ "$has_backup" = "yes" ]; then
    printf -- "\nATTENTION!\n"
    printf -- " Some of your previously existing usrcfg files were backed up\n"
    printf -- " and replaced!\n"
    printf -- " Please update the new files with the content of the backup ones\n"
    printf -- " to ensure continued operation of your USRHOME based shells!\n"
fi

prompt "Continue"
clear
echo "OK, clearing screen and proceeding..."

# --------
# 3: Backup user's Z Shell files, copy them to usrhome/dot,
#    and create symlinks from ~ files to usrhome/dot files.
#
echo "- Backup user Z Shell config files and set symlinks to USRHOME files."
echo ""
echo "  Now we rename your Z Shell config files as shown here unless they "
echo "  are already symlinks pointing to the USRHOME files."
echo "  if they are regular files they will be renamed like this:"
echo "   - ~/.zlogin   --> ~/backup-zlogin"
echo "   - ~/.zlogout  --> ~/backup-zlogout"
echo "   - ~/.zprofile --> ~/backup-zprofile"
echo "   - ~/.zshenv   --> ~/backup-zshenv"
echo "   - ~/.zshrc    --> ~/backup-zshrc"
echo ""
echo "  If they are symbolic links not pointing USRHOME files, "
echo "  they are re-linked after printing their original targets."
echo "  If the symbolic links did not already exist, they are created."
echo "  The end result will be:"
echo "   - ~/.zlogin@   --> $USRHOME_DIR/dot/zlogin.zsh"
echo "   - ~/.zlogout@  --> $USRHOME_DIR/dot/zlogout.zsh"
echo "   - ~/.zprofile@ --> $USRHOME_DIR/dot/zprofile.zsh"
echo "   - ~/.zshenv@   --> $USRHOME_DIR/dot/zshenv.zsh"
echo "   - ~/.zshrc@    --> $USRHOME_DIR/dot/zshrc.zsh"
echo ""
echo " ATTENTION:  please open another terminal using your current"
echo "             shell setup and tools to use once the shell"
echo "             config files are replaced by symlinks."
echo ""
prompt "Do you wish to proceed"
clear
echo "OK, clearing screen, backing up ZShell config and creating symlinks..."
echo ""

modify_dot_file zlogin   zsh
modify_dot_file zlogout  zsh
modify_dot_file zprofile zsh
modify_dot_file zshenv   zsh
modify_dot_file zshrc    zsh
echo ""
echo "Done:"
echo " Z Shell Configuration files backed up,"
echo " symlinks to usrcfg files created."
echo ""
echo ""
echo "The next step is to do the same for the Bash"
echo "configuration files: backing them up and creating"
echo "symlinks to their usrhome/dot corresponding files."
echo ""
echo "  The end result will be:"
echo "   - ~/.bash_login@   --> $USRHOME_DIR/dot/bash_login.bash"
echo "   - ~/.bash_logout@  --> $USRHOME_DIR/dot/bash_logout.bash"
echo "   - ~/.bash_profile@ --> $USRHOME_DIR/dot/bash_profile.bash"
echo "   - ~/.bashrc@       --> $USRHOME_DIR/dot/bashrc.bash"
echo "   - ~/.profile@      --> $USRHOME_DIR/dot/profile.sh"
echo ""
echo " ATTENTION:  please open another terminal using your current"
echo "             shell setup and tools to use once the shell"
echo "             config files are replaced by symlinks."
echo ""
prompt "Do you wish to proceed"
clear
echo "OK, clearing screen, backing up Bash config and creating symlinks..."
echo ""

modify_dot_file bash_login   bash
modify_dot_file bash_logout  bash
modify_dot_file bash_profile bash
modify_dot_file bashrc       bash
modify_dot_file profile      sh
echo ""
echo "Done:"
echo " Bash Configuration files backed up,"
echo " symlinks to usrhome/dot files created."
echo ""
echo ""
echo "****************COMPLETE!************************************"
echo "USRHOME automated setup is now complete."
echo " You must now integrate the backup of your Bash and/or ZShell"
echo " into the usrhome/dot files that are identified by the symlink."
echo "****************COMPLETE!************************************"
echo ""
echo "DO NOT CLOSE THIS TERMINAL!"
echo " It uses your old shell setup: use it to perform"
echo " the required editing!"


# ----------------------------------------------------------------------------
# Local Variables:
# sh-shell: sh
# End:
