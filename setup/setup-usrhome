#!/bin/sh
# SH FILE: setup-usrhome
#
# Purpose   : Setup usrhome personnal/private persistent files.
# Created   : Thursday, March 28 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2024-04-20 15:22:23 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# USRHOME Initial configuration: creates the initial personnal/private
# persistent configuration script file inside the usrcfg directory placed in
# the same directory already holding usrhome.  Then create the user's Z Shell
# configuration file symlinks pointing to the ones provided by USRHOME.  If
# there was any pre-existing regular files, they are renamed to regular
# (non-hidden) backup files.
#
# All executed commands are printed on stdout.
#
# Before proceeding, the script prints a description of what would be done
# and prompts to proceed.
#
# EXIT CODE:
#  - 0 on success
#  - 1 on command error
#  - 2 on user request to exit

# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# - POSIX commands.

# ----------------------------------------------------------------------------
# Code
# ----
#
#
# Checking or setting USRHOME_DIR environment variable
# ----------------------------------------------------
if [ -z "$USRHOME_DIR" ]; then
    USRHOME_DIR=$(pwd -P)
    if [ "$(basename "$USRHOME_DIR")" != "usrhome" ]; then
        echo "The directory where USRHOME is installed must be identified"
        echo "by the USRHOME_DIR environment variable."
        echo "The directory name should be 'usrhome'"
        echo "It's currently not the case; it is: $(basename "$USRHOME_DIR")"
        echo "Please rename the directory to usrhome and try again."
        exit 1
    fi
fi



# Utility Functions
# -----------------

# Global script variable: used as output from prompt().
proceed=1

prompt()
{
    # Arg 1: string: prompt
    # Arg 2: optional string. When empty/unused, the function exits when the user
    #                         answer is NO and exits normally when the user
    #                         types YES.
    #                         When non-empty, prompt does not exit when user
    #                         answer NO and the caller must check the returned
    #                         value stored in the proceed variable:
    #                         set to 1 on yes, 0 on no.
    while true; do
        printf "%s [yn]? " "$1"
        read -r yn
        case $yn in
            [Yy]* )
                proceed=1
                break
                ;;
            [Nn]* )
                proceed=0
                if [ -z "$2" ]; then
                    echo "Exiting..."
                    exit 2
                else
                    break
                fi
                ;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

exit_on_error()
{
    # Arg 1: string: error message
    printf "ERROR: %s\nExiting..." "$1"
    exit 1
}


create_dot_file()
{
    # Arg 1: string: base name of config file (without the leading period)
    # Arg 2: string: complete path to USRHOME dot config file to use

    echo "  ln -sf $2 $HOME/.$1"
    ln -sf "$2" "$HOME/.$1" || exit_on_error "creating symlink for $HOME/.$1"
}

modify_dot_file()
{
    # Arg 1: string: base name of config file (without the leading period)

    usrhome_src="$(realpath "$USRHOME_DIR/dot/$1.zsh")"

    if [ -f "$HOME/.$1" ]; then
        if [ ! -h "$HOME/.$1" ]; then
            # A regular file is being used: back it up.
            echo " - Creating backup for $HOME/.$1:"
            echo "   mv $HOME/.$1 $HOME/backup-$1"
            mv "$HOME/.$1" "$HOME/backup-$1" || exit_on_error "renaming $HOME/.$1"
        fi
    fi

    if [ -h "$HOME/.$1" ]; then
        #  A symlink exists
        old_src="$(realpath "$(readlink "$HOME/.$1")")"
        if [ "$old_src" != "$usrhome_src" ]; then
            echo " - Changing $HOME/.$1 symlink target from: ${old_src}:"
            create_dot_file "$1" "$usrhome_src"
        fi
    else
        # No symlink (either was a regular file or there was none).
        echo " - Creating $HOME/.$1 symlink:"
        create_dot_file "$1" "$usrhome_src"
    fi
}

# ----------------------------------------------------------------------------
# Script Execution
# ----------------

curpath=$(pwd)
parentpath=$(dirname "$curpath")

# --------
# 1: Create usrcfg and store the following files into it:
#                      - usrcfg/setfor-zsh-config.zsh
echo "----- USRHOME Installation:"
echo "It will do this:"
echo ""
echo "- Create ${parentpath}/usrcfg"
echo "- Copy   ${curpath}/template/usrcfg/setfor-zsh-config.zsh"
echo "    to   ${parentpath}/usrcfg/setfor-zsh-config.zsh"
echo ""
prompt "Do you wish to proceed"
echo "OK, proceeding..."
echo ""
#
echo "- Create user configuration file from the template."
src_fpath="${curpath}/template/usrcfg/setfor-zsh-config.zsh"
target_dirpath="${parentpath}/usrcfg"
target_fpath="${parentpath}/usrcfg/setfor-zsh-config.zsh"

do_copy=1
do_backup=0
if [ -e "$target_fpath" ]; then
    echo " WARNING: $target_fpath already exists!"
    prompt " Do you wish to back it up and overwrite it" dont-exit-on-no
    do_backup=$proceed
    do_copy=$proceed
else
    if [ ! -d "$target_dirpath" ]; then
        mkdir "$target_dirpath" || exit_on_error "creating $target_dirpath"
    fi
fi
if [ "$do_backup" = "1" ]; then
    echo "  cp $target_fpath ${target_fpath}.old"
    cp "$target_fpath" "$target_fpath".old
fi
if [ "$do_copy" = "1" ]; then
    echo "  cp $src_fpath $target_fpath"
    cp "$src_fpath" "$target_fpath"
fi
echo ""

# --------
# 2: Write value of USRHOME_DIR into usrcfg/setfor-zsh-config.zsh
#
echo "- Create file $target_fpath"
echo "  from the usrhome/template/usrcfg/setfor-zsh-config.zsh"
echo "  and setting USRHOME_DIR value to $USRHOME_DIR"
prompt "Do you wish to proceed"
sed "s~SETUP_USRHOME_REPLACED_DIR_VALUE~${USRHOME_DIR}~g" "$USRHOME_DIR/template/usrcfg/setfor-zsh-config.zsh" > "$target_fpath"
echo "Done. "

# --------
# 3: Backup user's Z Shell files, copy them to usrhome/dot,
#    and create symlinks from ~ files to usrhome/dot files.
#
echo "- Backup user Z Shell config files and set symlinks to USRHOME files."
echo ""
echo "  Now we rename your Z Shell config files as shown here unless they "
echo "  are already symlinks pointing to the USRHOME files."
echo "  if they are regular files they will be renamed like this:"
echo "   - ~/.zlogin   --> ~/backup-zlogin"
echo "   - ~/.zlogout  --> ~/backup-zlogout"
echo "   - ~/.zprofile --> ~/backup-zprofile"
echo "   - ~/.zshenv   --> ~/backup-zshenv"
echo "   - ~/.zshrc    --> ~/backup-zshrc"
echo ""
echo "  If they are symbolic links not pointing USRHOME files, "
echo "  they are re-linked after printing their original targets."
echo "  If the symbolic links did not already exist, they are created."
echo "  The end result will be:"
echo "   - ~/.zlogin@   --> $USRHOME_DIR/dot/zlogin.zsh"
echo "   - ~/.zlogout@  --> $USRHOME_DIR/dot/zlogout.zsh"
echo "   - ~/.zprofile@ --> $USRHOME_DIR/dot/zprofile.zsh"
echo "   - ~/.zshenv@   --> $USRHOME_DIR/dot/zshenv.zsh"
echo "   - ~/.zshrc@    --> $USRHOME_DIR/dot/zshrc.zsh"
echo ""
prompt "Do you wish to proceed"
echo "OK, proceeding..."
echo ""

modify_dot_file zlogin
modify_dot_file zlogout
modify_dot_file zprofile
modify_dot_file zshenv
modify_dot_file zshrc

echo ""
echo "USRHOME setup complete!"

# ----------------------------------------------------------------------------
